{"version":3,"sources":["components/InputItem.js","components/TaskItem.js","components/App.js","LocalStorage.js","serviceWorker.js","index.js"],"names":["InputItem","props","useState","editTask","value","input","setInput","handleChange","event","target","className","onChange","onKeyPress","key","addTask","placeholder","TaskItem","item","editMode","setEditMode","TaskCheckBox","style","visibility","editBar","active","type","onClick","doneTask","checked","disabled","task","id","text","href","src","removeTask","App","initialValue","window","localStorage","getItem","JSON","parse","error","console","log","storedValue","setStoredValue","valueToStore","Function","setItem","stringify","useLocalStorage","localStorageItems","setLocalStorageItems","items","setItems","tasks","i","filter","index","map","indexOf","slice","length","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.6ae573c2.chunk.js","sourcesContent":["import React, { useState } from 'react';\n\nfunction InputItem(props) {\n  const [input, setInput] = useState(props.editTask ? props.value : '');\n\n  let newTask = () => {\n    if (input) {\n      setInput('');\n      props.addTask(input);\n    }\n  }\n\n  let editTask = () => {\n    if (input) {\n      props.editTask(input);\n    }\n  }\n\n\n  let handleChange = (event) => {\n    setInput(event.target.value);\n  }\n\n  if (props.editTask)\n    return (\n      <input className=\"edit-item\" onChange={handleChange} value={input} onKeyPress={(event) => event.key === 'Enter' && editTask()} />\n    );\n\n  return (\n    <input className=\"input-item\" onChange={handleChange} value={input} onKeyPress={(event) => event.key === 'Enter' && newTask()} placeholder=\"Add new task...\" />\n  );\n}\n\nexport default InputItem;","import React, { useState } from 'react';\nimport InputItem from './InputItem';\n\nfunction TaskItem({ item, ...props }) {\n  const [editMode, setEditMode] = useState(false);\n\n  const TaskCheckBox = () => {\n    const style = {\n      visibility: (props.editBar)? 'hidden': ''\n    };\n    if (item.active) {\n      return (\n        <input type=\"checkbox\" style={style} onClick={props.doneTask} />\n      );\n    }\n    return (\n      <input type=\"checkbox\" style={style} checked disabled />\n    );\n  };\n\n  let editTask = (task) => {\n    props.editTask(item.id, task);\n    setEditMode(false);\n  }\n\n\n  if (editMode)\n  return (<InputItem editTask={editTask} value={item.text}></InputItem>);\n\n  const className = 'item' + (!item.active ? '-done' : '');\n  return (\n    <div className={className}>\n      <TaskCheckBox></TaskCheckBox>\n      <div className=\"item-text\">{item.text}</div>\n      <div className=\"edit-bar\">\n      {(props.editBar && item.active)? (<a href=\"#edit\" onClick={() => setEditMode(true)}><img className=\"task-edit-button\" src=\"./edit.svg\" /></a>) : ''}\n      {(props.editBar)? (<a href=\"#remove\" onClick={() => props.removeTask(item.id)}><img className=\"task-clear-button\" src=\"./clear.svg\" /></a>) : ''}\n      </div>\n    </div>\n  );\n}\n\nexport default TaskItem;","import React, { useState } from 'react';\nimport {useLocalStorage} from '../LocalStorage';\nimport TaskItem from './TaskItem';\nimport InputItem from './InputItem';\nimport '../App.css';\n\nfunction App (){\n  const [localStorageItems, setLocalStorageItems] = useLocalStorage();\n  const [editMode, setEditMode] = useState(false);\n  const [items, setItems] = useState(localStorageItems ? localStorageItems : []);\n\n  let doneTask = (id) => {\n    const index = items.map(task => task.id).indexOf(id);\n    setItems((tasks) => {\n      tasks = items.slice();\n      tasks[index].active = false;\n      setLocalStorageItems(tasks);\n      return tasks;\n    });\n  }\n\n  let removeTask = (id) => {\n    setItems((tasks) => {\n      tasks = items.filter((item) => item.id !== id)\n      for(let i in tasks)\n        tasks[i].id = i;\n      setLocalStorageItems(tasks);\n      return tasks;\n    });\n  }\n\n  let editTask = (id, task) => {\n    const index = items.map(task => task.id).indexOf(id);\n    setItems((tasks) => {\n      tasks = items.slice()\n      tasks[index].text = task;\n      setLocalStorageItems(tasks);\n      return tasks;\n    });\n  }\n\n  let addTask = (task) => {\n    setItems((tasks) => {\n      tasks = [...items, {\n        id: items.length,\n        text: task,\n        active: true\n      }];\n      setLocalStorageItems(tasks);\n      return tasks;\n    });\n  }\n\n  return (\n    <div className=\"App\">\n      <div className=\"title-bar\">\n        ToDo List\n        <a href=\"#edit-list\" onClick={() => setEditMode(editMode? false : true)}><img className=\"task-list-button\" src=\"./list.svg\" /></a>\n      </div>\n      {items.map(task => (\n        <TaskItem item={task} key={task.id} doneTask={() => doneTask(task.id)} editTask={editTask} removeTask={removeTask} editBar={editMode}></TaskItem>\n        ))}\n      <InputItem addTask={addTask}></InputItem>\n      <div className=\"blockpage\"></div>\n    </div>\n  );\n}\n\nexport default App;\n","import { useState } from 'react';\n\nfunction useLocalStorage(key, initialValue) {\n    // State to store our value\n    // Pass initial state function to useState so logic is only executed once\n    const [storedValue, setStoredValue] = useState(() => {\n      try {\n        // Get from local storage by key\n        const item = window.localStorage.getItem(key);\n        // Parse stored json or if none return initialValue\n        return item ? JSON.parse(item) : initialValue;\n      } catch (error) {\n        // If error also return initialValue\n        console.log(error);\n        return initialValue;\n      }\n    });\n    // Return a wrapped version of useState's setter function that ...\n    // ... persists the new value to localStorage.\n    const setValue = value => {\n      try {\n        // Allow value to be a function so we have same API as useState\n        const valueToStore = value instanceof Function ? value(storedValue) : value;\n        // Save state\n        setStoredValue(valueToStore);\n        // Save to local storage\n        window.localStorage.setItem(key, JSON.stringify(valueToStore));\n      } catch (error) {\n        // A more advanced implementation would handle the error case\n        console.log(error);\n      }\n    };\n    return [storedValue, setValue];\n  }\n\n  export {useLocalStorage};","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}